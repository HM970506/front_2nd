name: CI Assignment 6

on:
  pull_request:
    types:
      - opened
      - synchronize
    paths:
      - "packages/assignment-6/**"

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: |
          cd packages/assignment-6
          pnpm install

      - name: Run tsc & build
        run: |
          cd packages/assignment-6
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build # 아티팩트 이름
          path: build # 업로드할 빌드 결과물 경로

      # 오류 발생 시 코멘트 남기기
      - name: Post comment on failure
        if: failure()
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = context.payload.pull_request ? context.payload.pull_request.number : null;
            if (issue_number) {
              github.rest.issues.createComment({
                ...context.repo,
                issue_number: issue_number,
                body: `🚨 빌드 실패 🚨\nNode.js 버전: ${{ matrix.node-version }}\n오류가 발생했습니다. 로그를 확인해주세요.`
              });
            }

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: |
          cd packages/assignment-6
          pnpm install

      - name: Run ESLint
        run: |
          cd packages/assignment-6
          npm run lint

      - name: Read ESLint results
        id: read-eslint-results
        run: |
          if [ -f eslint-results.json ]; then
            echo "ESLINT_RESULTS=$(cat eslint-results.json)" >> $GITHUB_ENV
          fi

      - name: ESLint Results
        if: failure()
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = context.payload.pull_request.number;
            const eslintResults = JSON.parse(process.env.ESLINT_RESULTS);
            const errorMessages = eslintResults.map(result => {
              return result.messages.map(msg => `- ${result.filePath}: ${msg.message} (line ${msg.line}, column ${msg.column})`).join('\n');
            }).join('\n');
            const errorCount = eslintResults.reduce((sum, result) => sum + result.errorCount, 0);
            github.rest.issues.createComment({
              ...context.repo,
              issue_number: issue_number,
              body: `### ESLint Results \n ${errorCount}\n\n**에러 메시지**:\n${errorMessages}`
            });

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: |
          cd packages/assignment-6
          pnpm install

      - name: Run tests with coverage
        run: |
          cd packages/assignment-6
          npm test

      - name: Upload coverage report
        if: success() || failure()
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: coverage

      - name: Generate coverage comment
        if: success() || failure()
        run: |
          sudo apt-get install jq

          if [ -f coverage/coverage-summary.json ]; then
           LINE_COVERAGE=$(jq -r '.total.lines.pct' coverage/coverage-summary.json)
           BRANCH_COVERAGE=$(jq -r '.total.branches.pct' coverage/coverage-summary.json)
           FUNCTION_COVERAGE=$(jq -r '.total.functions.pct' coverage/coverage-summary.json)
           STATEMENT_COVERAGE=$(jq -r '.total.statements.pct' coverage/coverage-summary.json)

           COMMENT="### Test Results\n\n- **Test Status**: Success\n\n- **Coverage Summary**:\n  - Line Coverage: $LINE_COVERAGE%\n  - Branch Coverage: $BRANCH_COVERAGE%\n  - Function Coverage: $FUNCTION_COVERAGE%\n  - Statement Coverage: $STATEMENT_COVERAGE%"
          else
           COMMENT="### Test Results\n\n- **Test Status**: Failure\n\n- No coverage report found."
          fi

          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -X POST \
               -d "{\"body\": \"$COMMENT\"}" \
               https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments
  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Build project
        run: |
          cd packages/assignment-6
          pnpm i
          npm run build

      - name: Start local server
        run: |
          pnpm install -g serve
          nohup serve -s build > /dev/null 2>&1 &
          sleep 10 # Allow time for the server to start

      - name: Install dependencies
        run: |
          cd packages/assignment-6
          pnpm i -g @lhci/cli

      - name: Run Lighthouse CI
        run: |
          lhci collect --url=http://localhost:3000 --output=./lighthouse-report
          lhci assert --assertions="first-contentful-paint<5000,largest-contentful-paint<2500"
          lhci upload --output=./lighthouse-report
        env:
          LHCI_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Lighthouse comment
        run: |
          # Install jq for JSON processing
          sudo apt-get install -y jq

          # Extract Lighthouse results
          REPORT_FILE=$(find . -name 'report.html')
          REPORT_URL="https://github.com/${{ github.repository }}/suites/${{ github.run_id }}/artifacts/$(find ./ -name 'report.zip' -exec basename {} \;)"

          # Create comment body with results
          COMMENT="### Lighthouse Report\n\n[View Lighthouse Report]($REPORT_URL)\n"

          # Add some additional details if needed (e.g., score summary)
          # Adjust the JSON path according to your report structure
          # For instance:
          # PERFORMANCE=$(jq -r '.categories.performance.score' $REPORT_FILE)
          # COMMENT+="Performance Score: $PERFORMANCE\n"

          # Post comment to PR
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -X POST \
               -d "{\"body\": \"$COMMENT\"}" \
               https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments

  assign_reviewer:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: |
          cd packages/assignment-6
          pnpm install

      - name: Generate random reviewer and assign
        id: assign-reviewer
        run: |
          # Define team members here
          const teamMembers = ['2pandi', 'naturekim'];
          const randomReviewer = teamMembers[Math.floor(Math.random() * teamMembers.length)];
          console.log(`SELECTED_REVIEWER=${randomReviewer}`) >> $GITHUB_ENV

      - name: Assign reviewer
        id: assign-reviewer-api
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const selectedReviewer = process.env.SELECTED_REVIEWER;
            const prNumber = context.payload.pull_request.number;

            await github.rest.pulls.requestReviewers({
              ...context.repo,
              pull_number: prNumber,
              reviewers: [selectedReviewer]
            });

            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: prNumber,
              body: `:wave: @${selectedReviewer}님, 리뷰를 부탁드립니다.`
            });
