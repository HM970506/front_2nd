name: CI Assignment 6

on:
  pull_request:
    types:
      - opened
      - synchronize
    paths:
      - "packages/assignment-6/**"

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: |
          cd packages/assignment-6
          pnpm install

      - name: Run tsc & build
        run: |
          cd packages/assignment-6
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build # 아티팩트 이름
          path: build # 업로드할 빌드 결과물 경로

      # 오류 발생 시 코멘트 남기기
      - name: Post comment on failure
        if: failure()
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = context.payload.pull_request ? context.payload.pull_request.number : null;
            if (issue_number) {
              github.rest.issues.createComment({
                ...context.repo,
                issue_number: issue_number,
                body: `🚨 빌드 실패 🚨\nNode.js 버전: ${{ matrix.node-version }}\n오류가 발생했습니다. 로그를 확인해주세요.`
              });
            }

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: |
          cd packages/assignment-6
          pnpm install

      - name: Run ESLint
        run: npm run lint

      - name: Read ESLint results
        id: read-eslint-results
        run: |
          if [ -f eslint-results.json ]; then
            echo "ESLINT_RESULTS=$(cat eslint-results.json)" >> $GITHUB_ENV
          fi

      - name: ESLint Results
        if: failure()
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = context.payload.pull_request.number;
            const eslintResults = JSON.parse(process.env.ESLINT_RESULTS);
            const errorMessages = eslintResults.map(result => {
              return result.messages.map(msg => `- ${result.filePath}: ${msg.message} (line ${msg.line}, column ${msg.column})`).join('\n');
            }).join('\n');
            const errorCount = eslintResults.reduce((sum, result) => sum + result.errorCount, 0);
            github.rest.issues.createComment({
              ...context.repo,
              issue_number: issue_number,
              body: `### ESLint Results \n ${errorCount}\n\n**에러 메시지**:\n${errorMessages}`
            });

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: |
          cd packages/assignment-6
          pnpm install

      - name: Run tests with coverage
        run: npm test

      - name: Upload coverage report
        if: success() || failure()
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: coverage

  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: |
          cd packages/assignment-6
          pnpm install

      - name: Install Lighthouse CI
        run: npm run lhci:install

      - name: Run Lighthouse CI
        id: run-lighthouse-ci
        run: npm run lhci:run

      - name: Post Lighthouse CI results
        if: success() || failure()
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const lhciReport = fs.readFileSync('report.json', 'utf8');
            const lhciResults = JSON.parse(lhciReport);

            let commentBody = `## Lighthouse 성능 측정 결과\n\n`;
            commentBody += `| 카테고리 | 점수 |\n`;
            commentBody += `|------|------|\n`;
            commentBody += `| Performance | ${lhciResults.categories.performance.score * 100}% |\n`;
            commentBody += `| Accessibility | ${lhciResults.categories.accessibility.score * 100}% |\n`;
            commentBody += `| Best Practices | ${lhciResults.categories['best-practices'].score * 100}% |\n`;
            commentBody += `| SEO | ${lhciResults.categories.seo.score * 100}% |\n`;

            const issue_number = context.payload.pull_request.number;
            github.rest.issues.createComment({
              ...context.repo,
              issue_number: issue_number,
              body: commentBody
            });

  assign_reviewer:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "16"

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: |
          cd packages/assignment-6
          pnpm install

      - name: Generate random reviewer and assign
        id: assign-reviewer
        run: |
          # Define team members here
          const teamMembers = ['user1', 'user2', 'user3'];  # Replace with actual GitHub usernames

          // Randomly select a reviewer
          const randomReviewer = teamMembers[Math.floor(Math.random() * teamMembers.length)];

          // Write selected reviewer to environment file
          console.log(`SELECTED_REVIEWER=${randomReviewer}`) >> $GITHUB_ENV

      - name: Assign reviewer
        id: assign-reviewer-api
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const selectedReviewer = process.env.SELECTED_REVIEWER;
            const prNumber = context.payload.pull_request.number;

            // Add the selected reviewer to the pull request
            await github.rest.pulls.requestReviewers({
              ...context.repo,
              pull_number: prNumber,
              reviewers: [selectedReviewer]
            });

            // Post a comment with a mention
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: prNumber,
              body: `:wave: @${selectedReviewer}, you've been randomly selected to review this PR! Please take a look.`
            });
